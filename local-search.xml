<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络（二）</title>
    <link href="/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络(一)</title>
    <link href="/2023/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运筹学（二）</title>
    <link href="/2023/09/07/%E8%BF%90%E7%AD%B9%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/09/07/%E8%BF%90%E7%AD%B9%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运筹学（一）</title>
    <link href="/2023/09/07/%E8%BF%90%E7%AD%B9%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/09/07/%E8%BF%90%E7%AD%B9%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="线性规划问题的一般形式"><a href="#线性规划问题的一般形式" class="headerlink" title="线性规划问题的一般形式"></a>线性规划问题的一般形式</h2><ul><li>决策变量、目标函数、约束条件</li></ul><h2 id="线性规划问题的标准形式"><a href="#线性规划问题的标准形式" class="headerlink" title="线性规划问题的标准形式"></a>线性规划问题的标准形式</h2><ul><li>特点：目标函数求最大、约束条件等式、决策变量非负、资源限量非负</li><li>标准形式有三种形式：正常形式、求和形式、矩阵形式</li><li>化标准型：按照特点来化标准型</li><li></li></ul><h2 id="图解法"><a href="#图解法" class="headerlink" title="图解法"></a>图解法</h2><ul><li>只适用于有2个决策变量或能够转化为2个决策变量的线性规划问题</li><li>线性规划的解有四种情况：唯一最优解、多重解、无界解、无可行解(无可行域)</li></ul><h2 id="解的概念"><a href="#解的概念" class="headerlink" title="解的概念"></a>解的概念</h2><ul><li><p>可行解：满足约束条件的变量的值，称为（LP）可行解。所有可行解的集合称为可行解集（可行域）</p></li><li><p>最优解：使目标函数取得最优值的可行解，称为最优解。</p></li><li><p>矩阵A：m×n矩阵，m≤n，且r(A)&#x3D;m</p></li><li><p>基矩阵：A的m×n阶子矩阵B满足r(B)&#x3D;m,则B为线性规划的一个基(或基矩阵)</p></li><li><p>基向量：基矩阵对应的列向量</p></li><li><p>非基向量：其余列向量为非基向量</p></li><li><p>基变量：基向量对应的变量为基变量</p></li><li><p>非基变量：非基向量对应的变量为非基变量</p></li><li><p>基解：对某一确定的基B，在约束条件AX&#x3D;b中，令非基变量等于0，求解出基变量，称这组解为线性规划问题的基本解</p></li><li><p>基可行解：若基本解满足X≥0的非负约束，称为基本可行解</p></li><li><p>可行基：</p></li></ul><h2 id="单纯形法"><a href="#单纯形法" class="headerlink" title="单纯形法"></a>单纯形法</h2><ul><li>步骤一：化标准型，求初始基本可行解，构建初始单纯形表</li><li>步骤二：求检验数并判断，若已得到最优解，结束计算；否则转入下一步</li><li>步骤三：基变换，构建新的单纯形表进行迭代</li><li>步骤四：重复步骤二、三，直到得出最优解&#x2F;无最优解<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">检验数：<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运筹学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 考试常考</title>
    <link href="/2023/08/26/Java-%E8%80%83%E8%AF%95%E5%B8%B8%E8%80%83/"/>
    <url>/2023/08/26/Java-%E8%80%83%E8%AF%95%E5%B8%B8%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-考试常考"><a href="#Java-考试常考" class="headerlink" title="Java 考试常考"></a>Java 考试常考</h1><h2 id="书上习题和试卷考题"><a href="#书上习题和试卷考题" class="headerlink" title="书上习题和试卷考题"></a>书上习题和试卷考题</h2><ol><li>标识符:<ul><li>不能是关键字,不能是true,false,null</li><li>字母,下划线,美元符号,数字组成</li><li>第一个字符不能够是数字</li></ul></li><li><code>javac Hello.java</code>    <code>java Hello</code></li><li>javac.exe是JDK提供的编译器,java.exe是Java解释器</li><li>最多只能有一个类是public类，且源文件的名字必须与public类的名字完全相同(可以没有public类)</li><li>float常量后面要加f或者F(不可省略),char是单引号,byte范围-128~127,double后面的d或D可以省略</li><li>常量的默认数据类型是double</li><li>重载:在同一个类中方法名相同,但方法的参数必须不同(个数不同,类型不同)</li><li>重写:在子类中(不同类中),方法名,参数个数,返回类型,参数类型完全相同</li><li>一个类只能有一个父类(超类),一个类可以有多个子类</li><li>访问权限:public权限,protect权限,default权限(默认权限),private权限</li><li>接口可以看作是仅容纳抽象方法、常量,而又不能直接生成对象的特殊抽象类</li><li>在接口中定义的方法都只能是没有方法体的抽象方法</li><li>main方法不是所有Java程序执行的入口</li><li>在类中定义构造方法时,构造方法的方法名必须与所属类名相同,并且不应该有返回类型</li><li>父类的构造方法不可被子类继承(子类是通过<code>super()</code>关键字来调用父类的构造方法，并不是继承)</li><li>在子类中调用父类的构造方法时，需要用<code>super()</code>关键字</li><li><code>public static void main(String[] args)</code></li><li>java.lang.Object:所有其他的类都是它直接或间接的子类</li><li>面向对象的计算机语言:封装、继承、多态</li><li>声明数组时，可以先不分配内存</li><li>switch语句中可以没用default语句</li><li>String对象创建后是不可以再修改的、删除或者替换的</li><li>用了new一定会开辟新的堆空间</li><li>substring会得到一个全新的字符串，一个新的String对象</li><li>float型变量声明后面必须加f，特例：1不用加,<code>float n=1</code></li><li>二维数组声明和创建的时候可以省略列，不能够省略行</li><li>实例方法和变量调用：实例对象.方法名（实例方法.属性 或 实例方法.变量）</li><li>静态方法和变量调用： 类名.方法方法名（类名.属性 或 类名.变量）</li><li>编译Java源代码的命令是javac</li><li>可以调用String类的valueOf方法将数值转化为字符串</li><li>静态代码块只会初始化一次，且在类被第一次装载时</li><li>FlowLayout布局管理器将容器中的组件按照加入的先后顺序从左至右排列</li><li>java.lang不需要使用import指令就可以直接使用</li><li>抽象方法是没有方法体的方法</li><li>常见的事件类包括ActionEvent、MouseEvent，KeyEvent</li><li>设置JFrame窗口显示的方法：setVisible</li><li>同一个类的对象使用不同的内存空间，但静态属性共享相同的内存空间</li><li>super是指当前对象的父类</li><li>实现一个接口必须实现接口的所有方法</li><li>一个Java程序运行从上到下的环境次序是：Java程序、JRE&#x2F;JVM、操作系统、硬件</li><li>String对象转换： Integer.parseInt()   Double.parseDouble()</li><li>一个新对象的初始化可以通过调用构造函数来实现</li><li>一旦自定义了构造函数，系统默认构造函数将自动关闭</li></ol><hr><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><ol><li>文件字节输入流：FileInputStream类  文件字节输出流：FileOutputStream类</li><li>文件字符输入流：FileReader类  文件字符输出流：FileWriter类</li><li>缓冲输入流：BufferedReader流  缓冲输出流：BufferedWriter流</li><li>随机流：RandomAccessFile流(不仅能够读文件，也能写文件)</li><li>数据输入流：DataInputStream流  DataOutputStream流</li><li>缓存输入、输出流不能够直接指向一个文件</li></ol><hr><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ol><li>FlowLayout布局：按顺序从左往右，排满之后换行，每一行中的组件都剧中排列</li><li>(JFrame的默认布局)BorderLayout布局：CENTER(中)、NORTH(北)、SOUTH(南)、WEST(西)、EAST(东)</li><li>GridLayout布局：m×n个网格</li><li>JFrame创建的窗口默认是不可见的</li></ol><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>类：类是用于描述具有相似属性和行为的对象的集合，它定义了对象的属性和方法。类是抽象的，只是描述了对象的特征和行为，并不具体存在</li><li>对象：对象是类的实例，是类的具体化。它具有类定义的属性和方法，并可以通过对象来访问和操作这些属性和方法</li><li>方法：方法是类中定义的行为。它是一段可执行的代码，用于完成特点的任务。方法可以有参数和返回值，可以被其他方法或对象调用</li><li>属性：属性是类中定义的变量，用于存储对象的状态和特征。属性也被称为成员变量或实例变量，每个对象都有自己的一组属性</li><li>继承：继承是一种机制，允许一个类继承另一个类的属性和方法。通过继承，子类可以重用父类的代码，并可以添加自己的特定功能</li><li>多态：多态是指同一操作在不同对象上具有不同的行为。它允许使用父类的引用来引用子类的对象，从而实现动态绑定和方法的重写</li><li>封装：封装是一种将数据和操作封装在类中的机制。通过封装，我们可以隐藏对象的内部实现细节，只暴露必要的接口供外部访问</li><li>接口：接口是一种抽象的数据类型，定义了一组方法的规范。类可以实现一个或多个接口，从而强制实现接口定义的方法</li><li>包：包是一种组织类和接口的方式，用于解决命名冲突和管理类的访问权限。它将相关的类和接口组织在一起，形成了一个独立的单元</li><li>抽象类：抽象类是一种不能被实例化的类，只能被继承。它可以包含抽象方法和具体方法，用于定义一组相关的类的通用行为</li><li>面向对象编程：面向对象编程是一种编程范式，将问题分解为对象，通过对象之间的交互来解决问题。Java是一种面向对象的编程语言。</li><li>变量：变量是用于存储和表示数据的名称。在Java中，变量有不同的类型，如整数、浮点数、字符、布尔值等。</li><li>数据类型：数据类型是变量的特定类型，用于定义变量可以存储的数据范围和操作。Java中有基本数据类型和引用数据类型两种。</li><li>数组：数组是一种用于存储多个相同类型数据的容器。它可以通过索引访问和操作数组中的元素。</li><li>控制流：控制流用于控制程序的执行顺序和流程。Java中有条件语句（if-else、switch）、循环语句（for、while、do-while）和跳转语句（break、continue、return）等。</li></ol><hr><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h2><ol><li>JDK包含JRE，JDK和JRE中都包含JVM。JDK除了包含JRE还包含了一些常用开发工具和基础类库</li><li>JDK用于开发，JRE用于运行Java程序</li><li>JVM是Java编程语言的核心并且具有平台独立性</li></ol><hr><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><ol><li>局部变量：在方法或语句块内部的变量</li><li>成员变量：方法外部、类的内部定义的变量</li><li>常量：在前面加一个final修饰</li></ol><hr><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><ol><li>接口要被子类实现，抽象类要被子类继承</li><li>接口中变量全为公共静态常量，而抽象类中可有普通变量</li><li>接口中全为方法的声明，抽象类中可以有方法的实现</li><li>接口中不可以有构造函数，抽象类中可以有构造函数</li><li>接口可多实现，而抽象类必须被单继承</li><li>接口中方法全为抽象方法，而抽象类中也可以有非抽象方法</li></ol><hr><h3 id="试卷问答题"><a href="#试卷问答题" class="headerlink" title="试卷问答题"></a>试卷问答题</h3><ol><li>请简述String与StringBuffer的联系与区别</li><li>请简述值传递和引用传递的含义</li><li>请简述static方法不能调用非static方法和变量的原因</li><li>请简述异常处理的目的（请简述Java中异常处理的机制）</li><li>请简述Java界面设计中布局管理器的作用</li></ol><hr><h3 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h3><ol><li>Java基础知识：Java是一种面向对象的编程语言，具有简单、可移植、面向对象、安全和高性能等特性。面向对象的概念包括封装（将数据和方法封装在一个类中）、继承（通过继承可以创建新类并从现有类继承属性和方法）和多态（同一方法可以在不同的对象上具有不同的行为）。</li><li>数据类型和变量：Java有基本数据类型（如整型、浮点型、字符型、布尔型）和引用数据类型（如字符串、数组、类）。变量是用来存储数据的容器，需要先声明变量的类型，然后才能使用。 </li><li>控制流程：条件语句用于根据条件执行不同的代码块，包括if-else语句和switch语句。循环语句用于重复执行一段代码，包括for循环、while循环和do-while循环。break用于跳出循环，continue用于终止当前循环的迭代并进入下一次迭代。</li><li>数组和集合：数组是一种用于存储多个相同类型元素的数据结构，可以通过索引访问数组中的元素。集合是Java提供的一组类，用于存储和操作一组对象，常见的集合类有ArrayList和HashMap。 </li><li>方法和函数：方法是一段可重复使用的代码块，用于执行特定的任务。方法可以有参数和返回值，通过参数传递数据给方法，通过返回值将结果传递给调用者。方法可以重载，即在同一个类中可以有多个同名的方法，但参数列表不同。 </li><li>异常处理：异常是在程序运行时发生的错误或异常情况。Java提供了异常处理机制，通过try-catch语句捕获和处理异常。可以使用throw关键字手动抛出异常，使用throws关键字声明方法可能抛出的异常。 </li><li>文件操作：Java提供了用于读写文件的类和方法。可以使用File类来表示文件或目录，使用FileInputStream和FileOutputStream类来进行文件的读写操作。在文件操作过程中，需要处理可能发生的异常。 </li><li>类和对象：类是Java中用于创建对象的模板，包含了属性（成员变量）和行为（成员方法）。对象是类的实例化，通过new关键字创建。构造方法用于初始化对象的属性。访问修饰符用于控制类的成员的可见性。静态成员属于类本身，而不是对象。 </li><li>继承和多态：继承是一种类与类之间的关系，子类可以继承父类的属性和方法。子类可以重写父类的方法，实现自己的行为。多态是指同一个方法可以在不同的对象上具有不同的行为，通过父类引用指向子类对象实现。 </li><li>接口和抽象类：接口是一种抽象的类，只包含方法的定义，没有方法的实现。类可以实现一个或多个接口，实现接口的类必须实现接口中定义的所有方法。抽象类是一种不能被实例化的类，可以包含抽象方法和具体方法，子类必须实现抽象方法。接口和抽象类都用于实现代码的重用和灵活性。</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java—学习笔记</title>
    <link href="/2023/08/16/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/16/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习笔记"><a href="#Java-学习笔记" class="headerlink" title="Java 学习笔记"></a>Java 学习笔记</h1><h2 id="一-Java概述"><a href="#一-Java概述" class="headerlink" title="一.Java概述"></a>一.Java概述</h2><h3 id="1-程序设计语言发展及分类"><a href="#1-程序设计语言发展及分类" class="headerlink" title="1.程序设计语言发展及分类"></a>1.程序设计语言发展及分类</h3><h4 id="按发展历程分类"><a href="#按发展历程分类" class="headerlink" title="按发展历程分类"></a>按发展历程分类</h4><ul><li>机器语言:计算机直接识别的语言,0&#x2F;1代码   </li><li>汇编语言:低级语言,使用助记符代替0&#x2F;1    </li><li>高级语言:采用命令或者语句的语言,例如:c,c++,java</li></ul><h4 id="按思维模式分类"><a href="#按思维模式分类" class="headerlink" title="按思维模式分类"></a>按思维模式分类</h4><ul><li>面向过程的程序设计语言,例如c语言</li><li>面向对象的程序设计语言,例如Java,c++</li></ul><h4 id="按执行方式分类"><a href="#按执行方式分类" class="headerlink" title="按执行方式分类"></a>按执行方式分类</h4><ul><li>编译执行语言,如C语言</li><li>解释执行语言,如Java语言</li></ul><h3 id="2-Java语言的特色"><a href="#2-Java语言的特色" class="headerlink" title="2.Java语言的特色"></a>2.Java语言的特色</h3><ul><li>年轻的语言:1995年诞生</li><li>简单性:语法上类似C++,取消了C++的一些复杂而低效的特性</li><li>面向对象的语言:继承,封装,多态</li><li>分布式</li><li>健壮性:编译和运行时检查程序错误,Java自己操作内存,减少了内存出错的可能性</li><li>安全性:c++的指针和释放内存等功能被删除,避免了非法内存操作</li><li>可移植性:可在配备了Java解释器(Java虚拟机)和运行环境的任何计算系统上运行</li><li>解释运行:运行速度较慢,高版本的Java速度较快</li><li>多线程:在一个程序里,可同时执行多个小程序</li></ul><h3 id="3-Java有关术语"><a href="#3-Java有关术语" class="headerlink" title="3.Java有关术语"></a>3.Java有关术语</h3><h4 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h4><ul><li>JavaSE:标准版(桌面程序,控制台开发…)</li><li>JavaME:嵌入式开发(手机,小家电…)</li><li>JavaEE:E企业级开发(web端,服务器开发)</li></ul><h4 id="Java术语"><a href="#Java术语" class="headerlink" title="Java术语"></a>Java术语</h4><ul><li>JDK #Java语言开发包,由Java创造者Sun公司发布</li><li>SDK #Java语言软件开发包,从v1.2起jdk就称作SDK. 不严格区分时,常把JDK和SDK都叫做JDK</li><li>JRE #Java运行环境</li><li>JVM #Java虚拟机 Java的字节码运行再Java虚拟机上</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Java源程序<span class="hljs-comment">(.java)</span>  <br>    ⬇编译    <br>字节码程序<span class="hljs-comment">(.class)</span>  <br>    ⬇解释运行     <br>  解释器<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1.</span>Java源文件中最多只能有一个类是<span class="hljs-keyword">public</span>类,源文件名字必须与<span class="hljs-keyword">public</span>完全相同,扩展名是.java(可以没用<span class="hljs-keyword">public</span>类)<br><span class="hljs-number">2.</span>一个Java应用程序必须有有一个主类,Java程序从主类开始运行<br><span class="hljs-number">3.</span>JDK提供的编译器是javac.exe<br><span class="hljs-number">4.</span>java.exe是Java解释器<br></code></pre></td></tr></table></figure><hr><h2 id="二-基本数据类型-运算符-表达式-数组-字符串"><a href="#二-基本数据类型-运算符-表达式-数组-字符串" class="headerlink" title="二.基本数据类型 运算符 表达式 数组 字符串"></a>二.基本数据类型 运算符 表达式 数组 字符串</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><p>1.数据类型:  </p><ul><li>简单类型:<ul><li>整型(字节型byte,短整型short,基本型int,长整型long)</li><li>实型(单精度float,双精度double)</li><li>字符型char </li><li>布尔型boolean true&#x2F;false</li></ul></li><li>引用类型:数组,类(包括对象),接口</li></ul><p>2.标识符</p><ul><li>标识符组成:字母(A-Z,a-z,汉字),下划线(_),美元符($)和数字    </li><li>标识符的第一个字符不能是数字    </li><li>标识符不能够是关键字   </li><li>标识符不能是true,false和null(尽管他们不是Java关键字)</li></ul><p>3.整型常量</p><ul><li>八进制数第一位是0</li><li>十六进制数前两位是0x</li></ul><p>4.字符型常量</p><ul><li><p>Java采用Unicode字符集来定义字符类型</p></li><li><p>用单括号括起来的一个字符,如’A’,’a’</p></li><li><p>转义字符:\r(回车),\n(换行),\(反斜杠字符)</p></li><li><p>ASCII码:主要限于英语,65对应大写字母’A’</p></li></ul><p>5.布尔类型</p><ul><li>布尔型数据只有两个值true和false,并且他们不对应于任何整数值</li><li>boolean isFound&#x3D;true;</li></ul><p>6.自动类型转换</p><ul><li>自动类型转换:Java允许从小定义域类型的值自动转换到大定义域类型的变量</li><li>强制转换类型:大定义域类型的值转换到小定义域类型的值使用强制类型转换,可能会导致溢或精度下降</li></ul><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><ul><li>双目运算符:+,-,*,&#x2F;,%</li><li>单目运算符:++,–</li><li>关系运算符:&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,&#x3D;&#x3D;,!&#x3D;</li><li>逻辑运算符:&amp;&amp;(与),||(或),!(非),^(异或)</li><li>赋值运算符:+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;</li><li>条件运算符:?</li></ul><h3 id="3-表达式"><a href="#3-表达式" class="headerlink" title="3.表达式"></a>3.表达式</h3><ul><li>按照运算符的优先顺序从高向低进行</li><li>算术运算符有左结合性,赋值运算符有右结合性</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">char</span>类型是用单引号<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">float</span>类型的常量后面必须要有后缀f或F<br><br></code></pre></td></tr></table></figure><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h3><ul><li><p>声明数组: int[] anArray;  或 int anArray[];  声明时不会分配内存</p></li><li><p>创建一个数组:anArray&#x3D;new int[10];</p></li><li><p>anArray.length可以得到数组长度</p></li><li><p>对象数组声明,创建空间后,还要进行初始化才能使用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String strArray<span class="hljs-comment">;</span><br><span class="hljs-attribute">strArray</span><span class="hljs-operator">=</span>new String[<span class="hljs-number">10</span>]<span class="hljs-comment">; #不能直接使用</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5.字符串"></a>5.字符串</h3><ul><li>声明格式: String 字符串名;</li><li>创建格式: 字符串名 &#x3D; new String(字符串常量);</li><li>声明和创建可以一步完成: String s &#x3D; new String&#x3D;(“student”) 或 String s &#x3D; “student”</li><li>String类的方法,对象名.方法名() 的方式调用<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">s<span class="hljs-selector-class">.length</span>() 返回本字符串的长度(字符数)<br>s<span class="hljs-selector-class">.charAt</span>(int intdex) 返回本字符串中第index个字符(从<span class="hljs-number">0</span>算起)<br>aStr<span class="hljs-selector-class">.equals</span>(bStr) 字符串的比较<br>s<span class="hljs-selector-class">.indexOf</span>() 字符串查找<br></code></pre></td></tr></table></figure></li><li>StringBuffer类</li><li>Character类</li></ul><hr><h2 id="三-控制语句"><a href="#三-控制语句" class="headerlink" title="三.控制语句"></a>三.控制语句</h2><ul><li>条件语句   <ul><li>if语句:else与最近的if相结合</li><li>switch语句:用于判断”等于”,”为”即是确定的整数取值</li></ul></li><li>循环语句  <ul><li>while语句:最好用于次数不确定的循环</li><li>do-while语句:至少要执行一遍循环体的代码块</li><li>for语句:用于知道起始,终止,步长的循环</li><li>嵌套语句</li></ul></li><li>跳转语句<ul><li>break语句:循环语句结束,或从switch的分支中跳转出来</li><li>continue语句:不执行continue后面的语句,立即转入下次循环</li><li>return语句</li></ul></li></ul><hr><h2 id="四-类与对象"><a href="#四-类与对象" class="headerlink" title="四.类与对象"></a>四.类与对象</h2><ul><li><p>类声明:  <code>[访问修饰符public][类修饰符abstract,final]class 类名 [extends 父类名][implements 接口表]&#123;&#125;</code></p></li><li><p>成员变量: </p></li><li><p>方法重载: 返回相同的类型,但是参数必须有所不同(参数类型不同 或 顺序不同 或 个数不同)</p></li><li><p>一个方法必须声明返回类型,如果无返回值,则声明返回类型为viod</p></li><li><p>this变量表示的是当前类的当前对象本身</p></li><li><p>super表示的是当前对象的直接父类对象的引用</p></li><li><p>构造方法(构造函数)</p></li><li><p>非访问控制符: static final abstract</p></li><li><p>访问控制符: public protect private 默认修饰符</p></li></ul><h2 id="五-继承与接口"><a href="#五-继承与接口" class="headerlink" title="五.继承与接口"></a>五.继承与接口</h2><ul><li>子类: class 子类名 extends 分类名{}</li><li>方法重写:</li></ul><p>class J_SubClass extends J_Test{}<br>public class J_Test{<br>  J_Test(int i){<br>    System.out.println(i);<br>  }<br>  public static void main(String[] args){<br>    J_SubClass a &#x3D; new J_SubClass();<br>  }<br>}</p><h2 id="九-Java-SWing图形用户界面"><a href="#九-Java-SWing图形用户界面" class="headerlink" title="九.Java SWing图形用户界面"></a>九.Java SWing图形用户界面</h2><ul><li>组件：Component类的子类或间接子类创建的对象</li><li>容器：Container的子类或间接子类创建的对象</li><li>窗口(窗体)：JFrame创建的容器</li></ul><hr><ul><li>菜单条：JMenubar类</li><li>菜单项：JMenuItem类</li><li>菜单：JMenu类</li></ul><h3 id="常用组件-都是Component的子类"><a href="#常用组件-都是Component的子类" class="headerlink" title="常用组件(都是Component的子类)"></a>常用组件(都是Component的子类)</h3><ul><li>文本框：JTextFiled类</li><li>文本区：JTextArea类</li><li>按钮：JButton类</li><li>标签：JLabel类</li><li>选择框：JCheckBox类</li><li>单选按钮：JRadioButton类</li><li>下拉列表：JComboBox类</li><li>密码框：JPasswordField类</li></ul><h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><p>FlowLayout布局<br>BorderLayout布局<br>GridLayout布局</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 学习笔记</title>
    <link href="/2023/08/15/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/15/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-学习笔记"><a href="#Git-学习笔记" class="headerlink" title="Git 学习笔记"></a>Git 学习笔记</h1><h2 id="1-为何学习Git"><a href="#1-为何学习Git" class="headerlink" title="1.为何学习Git?"></a>1.为何学习Git?</h2><p>管理代码版本,记录,切换,合并代码</p><h2 id="2-Git仓库-repository"><a href="#2-Git仓库-repository" class="headerlink" title="2.Git仓库(repository)"></a>2.Git仓库(repository)</h2><p>记录文件状态内容的地方,存储着修改的历史记录(.git文件夹)  </p><p>创建:</p><ul><li>把本地文件夹转换成Git仓库:命令 <code>git init</code></li><li>从其他服务器上克隆Git仓库</li></ul><h2 id="3-Git的三个区域"><a href="#3-Git的三个区域" class="headerlink" title="3.Git的三个区域"></a>3.Git的三个区域</h2><p>Git使用时:  </p><ul><li>工作区:实际开发时操作的文件夹</li><li>暂存区:保存之前的准备区域(暂存改动过的文件)  </li><li>版本库:提交并保存暂存区中的内容,产生一个版本快照</li></ul><p>命令和作用:</p><ul><li>暂存指定文件:<code>git add 文件名</code></li><li>暂存所有改动的文件: <code>git add .</code></li><li>提交并保存,产生版本快照:<code>git commit -m &quot;注释说明&quot;</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 学习笔记</title>
    <link href="/2023/08/15/hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/15/hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-学习笔记"><a href="#hexo-学习笔记" class="headerlink" title="hexo 学习笔记"></a>hexo 学习笔记</h1><h2 id="1-hexo命令"><a href="#1-hexo命令" class="headerlink" title="1.hexo命令"></a>1.hexo命令</h2><ul><li>hexo new “标题” #创建新的文章</li><li>hexo clean #清理</li><li>hexo g#生成静态页面</li><li>hexo s#启动本地博客服务</li><li><a href="http://localhost:4000/">http://localhost:4000/</a>#本地访问地址</li><li>ctrl+c  #结束本地博客服务</li><li>hexo d#部署到远程Github仓库</li></ul><h2 id="2-MarkDown语法"><a href="#2-MarkDown语法" class="headerlink" title="2.MarkDown语法"></a>2.MarkDown语法</h2><pre><code class="hljs">#一级标题##二级标题  ###三级标题**粗体***斜体****斜体加粗***~~删除线~~&gt;引用---分割线***分割线![图片名字](图片路径)[超链接名字](链接地址)有序列表 1.无序列表 -空格代码```   (反引号)</code></pre><h2 id="3-Dos命令"><a href="#3-Dos命令" class="headerlink" title="3.Dos命令"></a>3.Dos命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#盘符切换   D:</span><br><span class="hljs-comment">#查看当前目录下的所有文件   dir</span><br><span class="hljs-comment">#切换目录   cd change directory</span><br>    返回上一级<span class="hljs-built_in">cd</span>..<br>    <br><span class="hljs-comment">#清理屏幕 cls clear screen</span><br><span class="hljs-comment">#退出终端 exit</span><br><span class="hljs-comment">#查看电脑ip ipconfig</span><br><span class="hljs-comment">#ping 命令</span><br><br><span class="hljs-comment">#文件操作</span><br>    <span class="hljs-built_in">md</span> 目录名  创建目录<br>    <span class="hljs-built_in">rd</span> 目录名  删除目录<br>    <span class="hljs-built_in">cd</span>&gt; 文件名 创建文件<br>    <span class="hljs-built_in">del</span> 文件名 删除文件<br></code></pre></td></tr></table></figure><h2 id="4-python实现自动推送到Git"><a href="#4-python实现自动推送到Git" class="headerlink" title="4.python实现自动推送到Git"></a>4.python实现自动推送到Git</h2><p>其实就是把几个命令行一起写在python中</p><pre><code class="hljs">import os# 切换到博客目录（根据实际路径进行修改）blog_path = &quot;D:/AAAblog&quot;os.chdir(blog_path)# 清理print(&quot;--------------------正在清理中--------------------&quot;)return_code = os.system(&quot;hexo clean&quot;)if return_code == 0:print(&quot;清理成功&quot;)else:print(&quot;清理失败&quot;)# 生成静态文件print(&quot;--------------------生成静态文件中--------------------&quot;)return_code = os.system(&quot;hexo generate&quot;)if return_code == 0:print(&quot;生成静态文件成功&quot;)else:print(&quot;生成静态文件失败&quot;)# 部署到线上print(&quot;--------------------正在部署到Git中--------------------&quot;)return_code = os.system(&quot;hexo deploy&quot;)if return_code == 0:print(&quot;部署到Git成功&quot;)else:print(&quot;部署到Git失败&quot;)# 等待用户按下回车键input(&quot;按回车键退出...&quot;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
